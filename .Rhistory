c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
library(RODBC)
odbcDataSources()
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
odbcDriverConnect()
odbcDataSources()
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
#load ODBC library
library(RODBC)
odbcDataSources()
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
require(Rserve)
Rserve()
Rserve()
install.packages(c("boot", "gtools", "manipulate"))
head(train)
rm(list = ls()); gc()
require(data.table);require(caret);require(doMC);require(ROCR)
registerDoMC(core=3)
load('data/new/cv_data_log_extend.RData')
install.packages("manipulate")
data("iris")
# this is a little tweak so that things line up nicely later on
iris$Species <- factor(iris$Species,
levels = c("versicolor","virginica","setosa"))
head(iris)
ound(cor(iris[,1:4]), 2)
round(cor(iris[,1:4]), 2)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
pc
summary(pc)
plot(pc,type="lines")
biplot(pc)
library(rgl)
plot3d(pc$scores[,1:3], col=iris$Species)
plot3d(pc$scores[,1:3], col=iris$Species)
plot3d(pc$scores[,1:3])#, col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
plot3d(pc$scores[,1:3], col=iris$Species, main="actual species")
with(iris, table(cluster, Species))
data("iris")
# this is a little tweak so that things line up nicely later on
iris$Species <- factor(iris$Species,
levels = c("versicolor","virginica","setosa"))
head(iris)
round(cor(iris[,1:4]), 2)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
summary(pc)
plot(pc,type="lines")
biplot(pc)
library(rgl)
plot3d(pc$scores[,1:3], col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon')
rm(list=ls()); gc()
load('../Datathon_Full_Dataset/Datathon_WC_Data_Complete.RData')
load('data/ivan_rfm/RFM_all.RData')
ls()
install.packages('googleVis')
dat_all$LAST_DATE <- as.Date(dat_all$LAST_DATE, '%Y-%m-%d')
dat_all <- dat_all[,-c(2,8:10)]
Motion=gvisMotionChart(data = dat_all[1:100,], idvar="ACCOUNT_ID", timevar="LAST_DATE",
xvar='Monetary', yvar='Frequency',
sizevar='R_Score',
colorvar="R_Score",  # RFM segments / Country
date.format = "%Y-%m-%d",
options=list(width=1200, height=600))
plot(Motion)
library(googleVis)
Motion=gvisMotionChart(data = dat_all[1:100,], idvar="ACCOUNT_ID", timevar="LAST_DATE",
xvar='Monetary', yvar='Frequency',
sizevar='R_Score',
colorvar="R_Score",  # RFM segments / Country
date.format = "%Y-%m-%d",
options=list(width=1200, height=600))
plot(Motion)
Motion=gvisMotionChart(data = dat_all, idvar="ACCOUNT_ID", timevar="LAST_DATE",
xvar='Monetary', yvar='Frequency',
sizevar='R_Score',
colorvar="R_Score",  # RFM segments / Country
date.format = "%Y-%m-%d",
options=list(width=1200, height=600))
plot(Motion)
print(Motion,'chart',file='motionChart.html')
Motion=gvisMotionChart(data = dat_all[1:10000,], idvar="ACCOUNT_ID", timevar="LAST_DATE",
xvar='Monetary', yvar='Frequency',
sizevar='R_Score',
colorvar="R_Score",  # RFM segments / Country
date.format = "%Y-%m-%d",
options=list(width=1200, height=600))
plot(Motion)
install.packages('googleVis')
library(googleVis)
dat_all$LAST_DATE <- as.Date(dat_all$LAST_DATE, '%Y-%m-%d')
# data_all <- aggregate(ACCOUNT_ID ~ ACCOUNT_ID, data=dt, sum, na.action = na.omit)
dat_all <- dat_all[,-c(2,8:10)]
Motion=gvisMotionChart(data = dat_all[1:10000,], idvar="ACCOUNT_ID", timevar="LAST_DATE",
xvar='Monetary', yvar='Frequency',
sizevar='R_Score',
colorvar="R_Score",  # RFM segments / Country
date.format = "%Y-%m-%d",
options=list(width=1200, height=600))
plot(Motion)
plot(Motion)
dates
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon')
rm(list=ls()); gc()
load('../Datathon_Full_Dataset/Datathon_WC_Data_Complete.RData')
################
### Measures ###
################ 1006045
# 0. RFM
# 4. Recency | lastest TRANSACTION_DATE - LAST_DATE
# 5. Frequency | count(distinct TRANSACTION_ID) group by ACCOUNT_ID
# 6. Monetary | average(BET_SIZE * PRICE_TAKEN/BET_PRICE) group by ACCOUNT_ID
dt$amounts <- dt$PRICE_TAKEN * dt$BET_SIZE
dt$TRANSACTION_DATE <- strptime(format(dt$PLACED_DATE, "%d/%m/%Y"),"%d/%m/%Y")
dt <- dt[order(dt$TRANSACTION_DATE,decreasing = TRUE),]
dt2 <- dt[dt$STATUS_ID=='S',]
# dt2$FREQ_ID <- paste0(dt2$BET_ID, dt2$ACCOUNT_ID)
dt2$FREQ_ID <- paste0(ifelse(dt2$BID_TYP == 'B', dt2$BET_ID, dt2$MATCH_BET_ID), dt2$ACCOUNT_ID)
dates <- unique(dt$TRANSACTION_DATE)
source('ivan is a tomato sause/3_RFM_Model.R')
dates
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon')
rm(list=ls()); gc()
load('../Datathon_Full_Dataset/Datathon_WC_Data_Complete.RData')
################
### Measures ###
################ 1006045
# 0. RFM
# 4. Recency | lastest TRANSACTION_DATE - LAST_DATE
# 5. Frequency | count(distinct TRANSACTION_ID) group by ACCOUNT_ID
# 6. Monetary | average(BET_SIZE * PRICE_TAKEN/BET_PRICE) group by ACCOUNT_ID
dt$amounts <- dt$PRICE_TAKEN * dt$BET_SIZE
dt$TRANSACTION_DATE <- strptime(format(dt$PLACED_DATE, "%d/%m/%Y"),"%d/%m/%Y")
dt <- dt[order(dt$TRANSACTION_DATE,decreasing = TRUE),]
dt2 <- dt[dt$STATUS_ID %in% c('S','C'),]
head(dt)
source('~/Google Drive/Melbourne Datathon/Melbourne_Datathon/ivan is a tomato sause/3_RFM_Model.R')
startDate="2014-12-16 15:55:43 AEDT"
endDate="2015-03-21 07:33:44 AEDT"
tIDColName="ACCOUNT_ID"
source('~/Google Drive/Melbourne Datathon/Melbourne_Datathon/ivan is a tomato sause/3_RFM_Model.R', echo=TRUE)
tAmountColName="amounts"
tDateColName="PLACED_DATE"
source('~/Google Drive/Melbourne Datathon/Melbourne_Datathon/ivan is a tomato sause/3_RFM_Model.R')
df <- dt2
newdf <- df[!duplicated(df[,tIDColName]),]
dim(newdf)
Recency<-as.numeric(difftime(endDate,newdf[,tDateColName],units="days"))
Recency
fre <- as.data.frame(table(df[,tIDColName]))
head(fre)
Frequency <- fre[,2]
range(Frequency)
fre[fre$Freq == 138952,]
df[df$ACCOUNT_ID==1016797,]
head(df[df$ACCOUNT_ID==1016797,])
a <- df[df$ACCOUNT_ID==1016797,]
a$id <- paste0(a$BET_ID, a$MATCH_BET_ID)
length(a$id)
length(unique(a$id))
a$id <- paste0(a$BET_ID, a$ACCOUNT_ID)
length(unique(a$id))
source('~/Google Drive/Melbourne Datathon/Melbourne_Datathon/ivan is a tomato sause/3_RFM_Model.R')
dt2$FREQ_ID <- paste0(dt2$BET_ID, dt2$ACCOUNT_ID)
df <- dt2
fre <- as.data.frame(table(df[,'FREQ_ID']))
Frequency <- fre[,2]
range(Frequency)
dim(fre)
source('~/Google Drive/Melbourne Datathon/Melbourne_Datathon/ivan is a tomato sause/3_RFM_Model.R')
newdf2 <- df[!duplicated(df[,'FREQ_ID']),]
source('~/Google Drive/Melbourne Datathon/Melbourne_Datathon/ivan is a tomato sause/3_RFM_Model.R')
fre <- as.data.frame(table(newdf2[,tIDColName]))
Frequency <- fre[,2]
range(Frequency)
source('~/Google Drive/Melbourne Datathon/Melbourne_Datathon/ivan is a tomato sause/3_RFM_Model.R')
source('~/Google Drive/Melbourne Datathon/Melbourne_Datathon/ivan is a tomato sause/3_RFM_Model.R')
dt$amounts <- ifelse(dt$BID_TYP == "L", (dt$PRICE_TAKEN-1)*-dt$BET_SIZE, -dt$BET_SIZE)
head(dt)
head(dt,50)
dim(dt)
head(dt[,c(29,22,21,20,19,18)],50)
dt$amounts <- abs(ifelse(dt$BID_TYP == "L", (dt$PRICE_TAKEN-1)*-dt$BET_SIZE, -dt$BET_SIZE))ß
dt$amounts <- abs(ifelse(dt$BID_TYP == "L", (dt$PRICE_TAKEN-1)*-dt$BET_SIZE, -dt$BET_SIZE))
head(dt[,c(29,22,21,20,19,18)],50)
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon')
rm(list=ls()); gc()
load('../Datathon_Full_Dataset/Datathon_WC_Data_Complete.RData')
################
### Measures ###
################ 1006045
# 0. RFM
# 4. Recency | lastest TRANSACTION_DATE - LAST_DATE
# 5. Frequency | count(distinct TRANSACTION_ID) group by ACCOUNT_ID
# 6. Monetary | average(BET_SIZE * PRICE_TAKEN/BET_PRICE) group by ACCOUNT_ID
# dt$amounts <- dt$PRICE_TAKEN * dt$BET_SIZE
dt$amounts <- abs(ifelse(dt$BID_TYP == "L", (dt$PRICE_TAKEN-1)*-dt$BET_SIZE, -dt$BET_SIZE))
dt$TRANSACTION_DATE <- strptime(format(dt$PLACED_DATE, "%d/%m/%Y"),"%d/%m/%Y")
dt <- dt[order(dt$TRANSACTION_DATE,decreasing = TRUE),]
dt <- dt[dt$STATUS_ID %in% c('S','C'),]
dt$FREQ_ID <- paste0(dt$BET_ID, dt$ACCOUNT_ID)
# dt2$FREQ_ID <- paste0(ifelse(dt2$BID_TYP == 'B', dt2$BET_ID, dt2$MATCH_BET_ID), dt2$ACCOUNT_ID)
dates <- unique(dt$TRANSACTION_DATE)
source('ivan is a tomato sause/3_RFM_Model.R')
head(dt)
newDF <- getRFMDataFrame(dt, startDate="2014-12-16 15:55:43 AEDT" ,endDate="2015-03-21 07:33:44 AEDT", tIDColName="ACCOUNT_ID", tDateColName="TRANSACTION_DATE", tAmountColName="amounts")
newDF2 <- getRFMIndependentScore(newDF, r=min(5, nrow(newDF)), f=min(5, nrow(newDF)), m=min(6, nrow(newDF)))
dat <- newDF2[,c(3, 4, 31:38)]
write.csv(dat, file=paste0('data/ivan_rfm/RFM_overall.csv'))
save(dat, file='data/ivan_rfm/RFM_overall.RData')
head(dat)
head(newDF2)
dat <- newDF2[,c(3, 4, 32:39)]
write.csv(dat, file=paste0('data/ivan_rfm/RFM_overall.csv'))
save(dat, file='data/ivan_rfm/RFM_overall.RData')
head(dat)
range(dat$Recency)
dat$Recency[order(dat$Recency, decreasing = T)]
dat$Recency[order(dat$Recency, decreasing = F)]
r_seg <- dat$Recency[order(dat$Recency, decreasing = F)]
length(r_seg)
length(r_seg)/5
hist(r_seg)
f_seg <- dat$Frequency[order(dat$Frequency, decreasing = T)]
m_seg <- dat$Monetary[order(dat$Monetary, decreasing = T)]
hist(f_seg)
hist(m_seg)
summary(m_seg)
m_seg
tail(m_seg)
head(m_seg)
View(m_seg)
m_seg[1:length(m_seg)/5]
range(m_seg[1:length(m_seg)/5])
range(m_seg[1:length(m_seg)/6])
range(m_seg[1:length(m_seg)/10])
m_seg[m_seg>1000]
length(m_seg[m_seg>1000])
summary(m_seg)
length(m_seg[m_seg<=20])
length(m_seg[m_seg<=70])
length(m_seg[m_seg<=90])
length(m_seg[m_seg<=45])
length(m_seg[m_seg<=100])
length(m_seg[m_seg<=290])
length(m_seg[m_seg<=1000])
summary(f_seg)
length(f_seg[f_seg>1000])
length(f_seg[f_seg>500])
View(f_seg)
head(f_seg)
hist(log10(f_seg))
hist(log10(f_seg), breaks = 100)
length(f_seg[f_seg<=2])
length(f_seg[f_seg<=7])
length(f_seg[f_seg<=9])
length(f_seg[f_seg<=50])
length(f_seg[f_seg<=100])
length(f_seg[f_seg<=500])
length(f_seg[f_seg>500])
head(dat)
dat$rfm <- ifelse(dat$Monetary<=100 & dat$Frequency <= 2, '9. Try Person',
ifelse(dat$Monetary>100 & dat$Frequency <= 2, '8. Event Focused Player',
ifelse(dat$Monetary<=100 & dat$Frequency <= 50, '7. Casual Entertainer',
ifelse(dat$Monetary<=1000 & dat$Frequency <= 50, '6. Frequent Gambler',
ifelse(dat$Monetary>1000 & dat$Frequency <= 500, '3. Professional gambler',
ifelse(dat$Monetary<=45 & dat$Frequency <= 500, '5. Opportunism',
ifelse(dat$Monetary<=290 & dat$Frequency <= 500, '4. Strategy Driven Gambler',
ifelse(dat$Monetary<=100 & dat$Frequency > 500, '2. Small Casual Group',
ifelse(dat$Monetary>100 & dat$Frequency > 500, '1. Large Gambling Group or Business', 'None')))))))))
dat$rfm
table(dat$rfm)
dat$rfm <- ifelse(dat$Monetary<=100 & dat$Frequency <= 2, '9. Try Person',
ifelse(dat$Monetary>100 & dat$Frequency <= 2, '8. Event Focused Player',
ifelse(dat$Monetary<=100 & dat$Frequency <= 50, '7. Casual Entertainer',
ifelse(dat$Monetary<=1000 & dat$Frequency <= 50, '6. Frequent Gambler',
ifelse(dat$Monetary>1000 & dat$Frequency <= 50, '3. Professional gambler',
ifelse(dat$Monetary<=45 & dat$Frequency <= 500, '5. Opportunism',
ifelse(dat$Monetary<=290 & dat$Frequency <= 500, '4. Strategy Driven Gambler',
ifelse(dat$Monetary>1000 & dat$Frequency <= 500, '3. Professional gambler',
ifelse(dat$Monetary<=100 & dat$Frequency > 500, '2. Small Casual Group',
ifelse(dat$Monetary>100 & dat$Frequency > 500, '1. Large Gambling Group or Business', 'None'))))))))))
table(dat$rfm)
dat[dat$rfm == 'None',]
head(dat[dat$rfm == 'None',])
View(dat[dat$rfm == 'None',])
range(dat[dat$rfm == 'None',4])
range(dat[dat$rfm == 'None',5])
dat$rfm <- ifelse(dat$Monetary<=100 & dat$Frequency <= 2, '9. Try Person',
ifelse(dat$Monetary>100 & dat$Frequency <= 2, '8. Event Focused Player',
ifelse(dat$Monetary<=100 & dat$Frequency <= 50, '7. Casual Entertainer',
ifelse(dat$Monetary<=1000 & dat$Frequency <= 50, '6. Frequent Gambler',
ifelse(dat$Monetary>1000 & dat$Frequency <= 50, '3. Professional gambler',
ifelse(dat$Monetary<=45 & dat$Frequency <= 500, '5. Opportunism',
ifelse(dat$Monetary<=290 & dat$Frequency <= 500, '4. Strategy Driven Gambler',
ifelse(dat$Monetary>290 & dat$Frequency <= 500, '3. Professional gambler',
ifelse(dat$Monetary<=100 & dat$Frequency > 500, '2. Small Casual Group',
ifelse(dat$Monetary>100 & dat$Frequency > 500, '1. Large Gambling Group or Business', 'None'))))))))))
head(dat[dat$rfm == 'None',])
table(dat$rfm)
save(dat, file='data/ivan_rfm/RFM_overall_seg.RData')
dat
head(dat)
seg_list <- dat[,c(1,11)]
seg_list
save(dat, file='data/ivan_rfm/SEG_list.RData')
head(dat)
head(dt2)
head(dt)
dim(dt)
dt2 <- merge(dt, seg_list, all.x = T)
table(dt2[,'FREQ_ID'])
head(dt2)
dim(dt2)
table(dt2[,'rfm'])
dt2$trans_amounts <- dt2$BET_SIZE * dt2$BET_PRICE
aggregate(trans_amounts ~ rfm, data=dt2, sum, na.action = na.omit)
head(dt2)
